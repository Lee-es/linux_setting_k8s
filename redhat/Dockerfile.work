### Dockerfile.worker (ARM64 + kubelet 서비스 등록 포함)

FROM registry.access.redhat.com/ubi9/ubi

ENV container=docker

# 필수 시스템 도구 설치
RUN dnf update -y && \
    dnf install -y \
        yum-utils device-mapper-persistent-data lvm2 \
        zsh git \
        systemd sudo shadow-utils tar && \
    dnf clean all

# --- Kubernetes 바이너리 수동 설치 (ARM64) ---
RUN curl -LO https://dl.k8s.io/release/v1.29.3/bin/linux/arm64/kubeadm && \
    curl -LO https://dl.k8s.io/release/v1.29.3/bin/linux/arm64/kubectl && \
    curl -LO https://dl.k8s.io/release/v1.29.3/bin/linux/arm64/kubelet && \
    chmod +x kubeadm kubectl kubelet && \
    mv kubeadm kubectl kubelet /usr/bin/

# --- kubelet systemd 서비스 등록 ---
RUN mkdir -p /etc/systemd/system/kubelet.service.d && \
    cat <<EOF > /etc/systemd/system/kubelet.service
[Unit]
Description=Kubernetes Kubelet Server
Documentation=https://kubernetes.io/docs/
After=network.target

[Service]
ExecStart=/usr/bin/kubelet
Restart=always
StartLimitInterval=0
RestartSec=10

[Install]
WantedBy=multi-user.target
EOF

# --- containerd 수동 설치 (ARM64) ---
RUN curl -L https://github.com/containerd/containerd/releases/download/v1.7.13/containerd-1.7.13-linux-arm64.tar.gz | \
    tar -C /usr/local -xz

RUN cat <<EOF > /usr/lib/systemd/system/containerd.service
[Unit]
Description=containerd container runtime
Documentation=https://containerd.io
After=network.target

[Service]
ExecStart=/usr/local/bin/containerd
Restart=always
Delegate=yes
KillMode=process
OOMScoreAdjust=-999
LimitNOFILE=1048576
LimitNPROC=infinity
LimitCORE=infinity

[Install]
WantedBy=multi-user.target
EOF


RUN dnf clean all && \
    rm -rf /var/cache/dnf /var/cache/yum /tmp/*

# systemd 설정
VOLUME ["/sys/fs/cgroup"]
STOPSIGNAL SIGRTMIN+3
CMD ["/sbin/init"]
